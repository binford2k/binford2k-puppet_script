#! /opt/puppetlabs/bin/puppet script
require 'tmpdir'

# The tempfiles could likely also be done to a degree using the `archive` resource type.
# I used `mktmpdir` to show intermingling stock Ruby code along with Puppet resources
# where it makes sense to do so. In this case, a randomized tempdir is created for the
# life of this block only, and then cleaned up deterministically.
Dir.mktmpdir do |dir|
  Dir.chdir dir

  ['one', 'two', 'three'].each do |name|
    resource(:file, "#{dir}/#{name}",
      :ensure => 'file',
      :source => "puppet:///modules/myapplication/upgrades/#{name}.sql",
    )
  end

  begin
    resource(:service, 'myapplication',
      :ensure  => 'stopped',
    )

    resource(:exec, 'backup',
      :command => "/usr/bin/mysqldump -u #{username} -p#{password} myapplication_db > db_backup.sql",
    )

    ['one', 'two', 'three'].each do |name|
      resource(:exec, 'apply update file',
        :command => "/usr/bin/mysql -u #{username} -p#{password} < #{name}.sql",
      )
    end

    resource(:package, 'myapplication',
      :ensure  => 'latest',
    )

  # if the upgrade fails, let's attempt to clean up after it and send a notification.
  # Notifications like this could be done with Splunk rules parsing Puppet reports,
  # but the automated cleanup would be difficult/awkward to do.
  rescue => e
    puts 'Oh, bother!'
    puts e.message

    send_email('admin@example.com',
      :subject  => "Application DB upgrade failed",
      :body     => "Restoring from backup.\n\n#{e.message}",
    )

    resource(:exec, 'restore backup on fail',
      :command => "mysql -u #{username} -p#{password} < db_backup.sql",
    )

    resource(:exec, 'app recover',
      :command => '/usr/bin/myapplication recover',
    )

  # no matter what happens, try to get the app up and running again
  ensure
    resource(:service, 'myapplication',
      :ensure  => 'running',
    )
  end

  # in a separate block, run our health check to validate that it's operational
  begin
    resource(:exec, '/usr/bin/myapplication healthcheck' )

  # but if the healthcheck fails, panic and page the on-call support immediately
  rescue => e
    send_email('oncall@example.com',
      :subject  => "Application health check failed after upgrade!",
      :body     => e.message,
      :priority => :highest,
    )
  end

end
