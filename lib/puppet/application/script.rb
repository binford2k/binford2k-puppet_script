require 'puppet/application'

class Puppet::Application::Script < Puppet::Application
  option("--debug","-d")
  option("--verbose","-v")

  def help
    <<-'HELP'
puppet-script(8) -- It's a script thing, yo.

See the README for an example of a Puppet script.

OPTIONS
-------
Like anything else Puppet, any setting that's valid in the configuration file is
also a valid long argument. For example, 'modulepath' is a valid setting, so you
can specify '--modulepath /path/to/modules' as an argument.  See the docs at
https://docs.puppetlabs.com/puppet/latest/reference/configuration.html for the
full list of acceptable parameters. A commented list of all configuration
options can also be generated by running 'puppet config print --all'.

* --debug:
  Enable full debugging.

* --verbose:
  Print extra information, such as the name of each resource as it's being managed.

* --help:
  Print this help message

    HELP
  end

  def ref(type, name)
    "#{type.capitalize}[#{name}]"
  end

  def key(type, name)
    [type, name].join('/')
  end

  def resource(type, name, params)
    puts ref(type, name) if options[:verbose]
    key = key(type, name)
    resource = Puppet::Resource.new( type, name, :parameters => params )
    result   = Puppet::Resource.indirection.save(resource, key)

    # jfc
    status = result.last.resource_statuses.first.last

    # Hrm. I shouldn't have to print errors manually w/o :verbose on?!
    if status.failed
      event = status.events.first.message
      @errors << event
      unless options[:verbose] # we've already printed errors
        $stderr.puts ref(type, name)
        $stderr.puts "  - #{event}"
      end
    end
    puts result.first.inspect if options[:debug]
    @resources << result.first
  end

  def main
    @errors    = []
    @resources = []
    filename   = command_line.args.shift
    raise "Could not find script file #{filename}" unless Puppet::FileSystem.exist?(filename)
    Puppet.warning("Only one script will be executed per run.  Skipping #{command_line.args.join(', ')}") if command_line.args.size > 0

    begin
      facts  = Facter.to_hash
      script = Puppet::FileSystem.read(filename)
      instance_eval(script)
    rescue StandardError, SyntaxError => e
      $stderr.puts e.message
      raise e
    end

     puts "Managed #{@resources.size} resources with #{@errors.size} failures."
    exit(@errors.size)
  end
end
